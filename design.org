* Goal
Follow-up project to [[file:~/projects/ocamlox/][ocamlox]]
- A dynamically-typed language
  (so don't have to write a type system yet)
- Actual language design, instead of just copying lox
  - mostly expression-based
    probably ocaml-like grammar, grammar is list of declarations that mostly doesn't need delimiters
  - impure functional
  - pattern matching
  - symbols
  - pipe operator
  - explicit refs?
    - or MVS!
  - maybe actors?
- Better QoI, error messages, etc
- Design inspirations
  - Lox, kind of
  - ocaml
  - given goals, probably look more at elixir and erlang
  - existing thoughts from [[file:~/docs/org/structural-module-lang-idea.org::*Draft 1][structural module lang]], at least some?
- initial goal: design, tree-walk interpreter
  - stretch: compile to wasm
    - maybe write bytecode interpreter?
      (probably not, leave that level of effort for other project)
  - tooling?
* Semantics
- scoped let, a la lisps and ocaml
- idk, normal impure eager-evaluation functional lang?




* Exceptions
Need:
- value
  probably ~Exception of { tag : t; value : t; stack : stack Option.t }~?
- constructor and matcher
  I'm thinking probably ~tag !! value~ or ~tag ! value~, with the stack added by ~raise~
  The most likely primitive for getting the ~stack~ is probably
  just making a new exception with the same (or related?) stack
- primitives:
  - ~raise~
  - something for chaining exceptions (or making new ones with the old stack-trace?)
    (Either like ~chain old new~ or ~raise (with-stack old new)~)
  - (maybe also a “clear stack-trace” function?)
    can replicate with ~\( tag ! value ) -> tag ! value~, though
- Catching matcher
  Probably ~raise pat~, where pat can only helpfully be from ~id~ or ~tag !! value~
- Matching combinators:
  definitely ~and~ (or ~as~), probably also add ~or~ for completeness
